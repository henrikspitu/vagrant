# -*- mode: ruby -*-
# vi: set ft=ruby :

 

Vagrant.configure("2") do |config|
 
  config.vm.box = "generic/centos7" 
  config.vm.network "public_network", ip: "192.29.16.10" 
  config.vm.hostname ="ansible1.hspo.dk"
  # Enable ssh forward agent
  config.ssh.forward_agent = true
 
  

  config.vm.provider "virtualbox" do |vb|
    vb.memory = 4096      # Memory size in M.
    vb.cpus   = 2         # Number of vCPUs
    vb.name   = "ansible1.hspo.dk"   # VM name.
    
  end

  config.vm.provision "shell" do |s|
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
    s.inline = <<-SHELL
      sudo yum update
      sudo yum install -y  dnsutils
      sudo yum install -y curl
      sudo apt-add-repository ppa:ansible/ansible -y
      sudo yum update
      sudo yum install -y ansible
      sudo yum install git -y  - nc
      sudo yum install telnet -y
      sudo yum install java-1.7.0-openjdk-headless -y


      sudo useradd -m hspo
      sudo mkdir /home/hspo/.ssh
      sudo chown -R hspo:hspo /home/hspo/.ssh
     
      echo #{ssh_pub_key} >> /home/hspo/.ssh/authorized_keys
      echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
      sudo echo "hspo ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/hspo

      sudo useradd -m ansible -p ansible
      sudo mkdir /home/ansible/.ssh 
      sudo chown -R ansible:ansible /home/ansible/.ssh
      sudo echo "ansible ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/ansible
      sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
      sudo systemctl restart sshd

      
      sudo ssh-keygen -f /home/ansible/.ssh/id_rsa -N ansible

      sudo git config --global user.email "hspo5master@hotmail.com"
      sudo git config --global user.name "henrikspitu"

    SHELL
  end


  
  

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   yum update
  #   yum install -y apache2
  # SHELL
end
