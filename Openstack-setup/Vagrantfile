# -*- mode: ruby -*-
# vi: set ft=ruby :
# IP's of servers have to be in the same network range as 
ENV['VAGRANT_NO_PARALLEL'] = 'yes'

Vagrant.configure(2) do |config|


  path = ENV["VAGRANT_HOME"]
  controller_ip = "10.0.0.21"
  storage_ip = "10.0.0.31"
  compute1_ip = "10.0.0.41"
  chrony_ip = "10.0.0.0/24"
  default_user = "openstack"
  default_password = "openstack"

 # Vagrant controller
  config.vm.define "controller" do |controller|
    controller.vm.box = "bento/ubuntu-16.04"
    controller.vm.hostname = "controller-vagrant"
    # create one network interface: , adapter: "1" but ssh will not connect
    # IP is RANDOM  when type dhcp is set
    # REMEMBER INTERFACE NEED TO BE MODIFIED WHEN CHANGING HOST
    controller.vm.network "private_network", virtualbox__intnet: "VirtualBox Host-Only Ethernet Adapter #5", ip: controller_ip, :adapter => 2
    controller.vm.provision "file", source: "files", destination: "~/files"
    controller.vm.provider "virtualbox" do |v|
      v.name = "controller"
      v.memory = 6144
      v.cpus = 2
      v.customize ["modifyvm", :id, "--nic3",  "natnetwork", "--nat-network3", "ProviderNetwork1", "--nicpromisc3", "allow-all" ]
      v.customize ["modifyvm", :id, "--nic4", "natnetwork", "--nat-network4", "NatNetwork1" ]
    end
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip

    #openstack.vm.provision "shell",
    #  run: "always",
    #  inline: "route add default gw 192.168.86.1 eth1"
    

    controller.vm.provision "shell", path: "bootstrap.sh", :args => [ssh_pub_key, controller_ip, storage_ip, compute1_ip, controller_ip ]
    controller.vm.provision :reload
    controller.vm.provision "shell", path: "chrony.sh", :args => ["yes", chrony_ip]
    controller.vm.provision :reload
    controller.vm.provision "shell", path: "software.sh"
    controller.vm.provision "shell", path: "controller.sh", :args => [controller_ip, default_user, default_password]

  end


  config.vm.define "storage" do |storage|
    storage.vm.box = "bento/ubuntu-16.04"
    storage.vm.hostname = "storage"
    storage.vm.network "private_network", virtualbox__intnet: "VirtualBox Host-Only Ethernet Adapter #5", ip: storage_ip, :adapter => 2
    storage.vm.provision "file", source: "files", destination: "~/files"
    storage.vm.provider "virtualbox" do |v|
      v.name = "openstackstorage"
      v.memory = 6144
      v.cpus = 2
      v.customize ["modifyvm", :id, "--nic3",  "natnetwork", "--nat-network3", "ProviderNetwork1", "--nicpromisc3", "allow-all" ]
      v.customize ["modifyvm", :id, "--nic4", "natnetwork", "--nat-network4", "NatNetwork1" ]
    end
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip

    #openstack.vm.provision "shell",
    #  run: "always",
    #  inline: "route add default gw 192.168.86.1 eth1"
    

    storage.vm.provision "shell", path: "bootstrap.sh", :args => [ssh_pub_key, controller_ip, storage_ip, compute1_ip, storage_ip ]
    storage.vm.provision :reload
    storage.vm.provision "shell", path: "chrony.sh", :args => ["no", chrony_ip]
    storage.vm.provision :reload
    storage.vm.provision "shell", path: "software.sh"
    #storage.vm.provision "shell", path: "storage.sh"
    


  end

  
  config.vm.define "compute1" do |compute1|
    compute1.vm.box = "bento/ubuntu-16.04"
    compute1.vm.hostname = "compute1"
    compute1.vm.network "private_network", virtualbox__intnet: "VirtualBox Host-Only Ethernet Adapter #5", ip: compute1_ip, :adapter => 2
    compute1.vm.provision "file", source: "files", destination: "~/files"
    compute1.vm.provider "virtualbox" do |v|
      v.name = "openstackcompute1"
      v.memory = 6144
      v.cpus = 2
      v.customize ["modifyvm", :id, "--nic3",  "natnetwork", "--nat-network3", "ProviderNetwork1", "--nicpromisc3", "allow-all" ]
      v.customize ["modifyvm", :id, "--nic4", "natnetwork", "--nat-network4", "NatNetwork1" ]
    end
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip

    #openstack.vm.provision "shell",
    #  run: "always",
    #  inline: "route add default gw 192.168.86.1 eth1"
    
    compute1.vm.provision "shell", path: "bootstrap.sh", :args => [ssh_pub_key, controller_ip, storage_ip, compute1_ip, compute1_ip ]
    compute1.vm.provision :reload
    compute1.vm.provision "shell", path: "chrony.sh", :args => ["no", chrony_ip]
    compute1.vm.provision :reload
    compute1.vm.provision "shell", path: "software.sh"

  end




end
